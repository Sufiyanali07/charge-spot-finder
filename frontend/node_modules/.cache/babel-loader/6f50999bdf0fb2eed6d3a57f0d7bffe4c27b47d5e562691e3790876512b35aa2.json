{"ast":null,"code":"import { mapActions, mapGetters } from 'vuex';\nimport mapboxgl from 'mapbox-gl';\nexport default {\n  name: 'MapView',\n  data() {\n    return {\n      map: null,\n      markers: [],\n      selectedStation: null,\n      showDeleteModal: false,\n      stationToDelete: null,\n      mapFilters: {\n        status: '',\n        connectorType: ''\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(['allStations', 'loading', 'isLoggedIn', 'user']),\n    filteredMapStations() {\n      let filtered = [...this.allStations];\n      if (this.mapFilters.status) {\n        filtered = filtered.filter(station => station.status === this.mapFilters.status);\n      }\n      if (this.mapFilters.connectorType) {\n        filtered = filtered.filter(station => station.connectorType === this.mapFilters.connectorType);\n      }\n      return filtered;\n    },\n    mapboxToken() {\n      // Using a valid public token for demo purposes\n      return 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';\n    }\n  },\n  methods: {\n    ...mapActions(['fetchStations', 'deleteStation']),\n    initializeMap() {\n      mapboxgl.accessToken = this.mapboxToken;\n      this.map = new mapboxgl.Map({\n        container: this.$refs.mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [-98.5795, 39.8283],\n        // Center of USA\n        zoom: 3\n      });\n\n      // Add navigation controls\n      this.map.addControl(new mapboxgl.NavigationControl());\n\n      // Add geolocate control\n      this.map.addControl(new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true\n      }));\n\n      // Wait for map to load before adding markers\n      this.map.on('load', () => {\n        this.addMarkersToMap();\n\n        // Check if there's a station ID in the query params\n        const {\n          id,\n          lat,\n          lng\n        } = this.$route.query;\n        if (id) {\n          const station = this.allStations.find(s => s._id === id);\n          if (station) {\n            this.selectStation(station);\n          }\n        } else if (lat && lng) {\n          // Center map on coordinates\n          this.map.flyTo({\n            center: [parseFloat(lng), parseFloat(lat)],\n            zoom: 15\n          });\n        }\n      });\n    },\n    addMarkersToMap() {\n      // Clear existing markers\n      this.markers.forEach(marker => marker.remove());\n      this.markers = [];\n\n      // Add markers for filtered stations\n      this.filteredMapStations.forEach(station => {\n        // Create marker element\n        const el = document.createElement('div');\n        el.className = 'marker';\n        el.style.backgroundColor = this.getMarkerColor(station.status);\n        el.style.width = '20px';\n        el.style.height = '20px';\n        el.style.borderRadius = '50%';\n        el.style.border = '2px solid white';\n        el.style.boxShadow = '0 0 5px rgba(0,0,0,0.3)';\n\n        // Create popup\n        const popup = new mapboxgl.Popup({\n          offset: 25\n        }).setHTML(`<strong>${station.name}</strong><br>\n          ${station.connectorType} - ${station.powerOutput} kW`);\n\n        // Create marker\n        const marker = new mapboxgl.Marker(el).setLngLat([station.location.longitude, station.location.latitude]).setPopup(popup).addTo(this.map);\n\n        // Add click event\n        marker.getElement().addEventListener('click', () => {\n          this.selectStation(station);\n        });\n        this.markers.push(marker);\n      });\n\n      // Fit map to markers if there are any\n      if (this.markers.length > 0) {\n        this.fitMapToMarkers();\n      }\n    },\n    fitMapToMarkers() {\n      if (!this.map || this.markers.length === 0) return;\n      const bounds = new mapboxgl.LngLatBounds();\n      this.filteredMapStations.forEach(station => {\n        bounds.extend([station.location.longitude, station.location.latitude]);\n      });\n      this.map.fitBounds(bounds, {\n        padding: 50,\n        maxZoom: 15\n      });\n    },\n    selectStation(station) {\n      this.selectedStation = station;\n\n      // Center map on selected station\n      this.map.flyTo({\n        center: [station.location.longitude, station.location.latitude],\n        zoom: 15\n      });\n    },\n    getMarkerColor(status) {\n      const colors = {\n        'Active': '#28a745',\n        'Inactive': '#6c757d',\n        'Maintenance': '#ffc107'\n      };\n      return colors[status] || '#6c757d';\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        'Active': 'badge bg-success',\n        'Inactive': 'badge bg-secondary',\n        'Maintenance': 'badge bg-warning text-dark'\n      };\n      return classes[status] || 'badge bg-secondary';\n    },\n    canManageStation(station) {\n      if (!this.isLoggedIn || !this.user) return false;\n\n      // User can manage if they are the owner or an admin\n      return station.owner?._id === this.user._id || this.user.role === 'admin';\n    },\n    confirmDelete(station) {\n      this.stationToDelete = station;\n      this.showDeleteModal = true;\n    },\n    async deleteSelectedStation() {\n      if (!this.stationToDelete) return;\n      try {\n        await this.deleteStation(this.stationToDelete._id);\n        this.showDeleteModal = false;\n        this.stationToDelete = null;\n        this.selectedStation = null;\n      } catch (error) {\n        console.error('Error deleting station:', error);\n      }\n    },\n    applyMapFilters() {\n      this.addMarkersToMap();\n    },\n    resetMapFilters() {\n      this.mapFilters = {\n        status: '',\n        connectorType: ''\n      };\n      this.addMarkersToMap();\n    }\n  },\n  async mounted() {\n    await this.fetchStations();\n    this.initializeMap();\n  },\n  beforeUnmount() {\n    if (this.map) {\n      this.map.remove();\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","mapboxgl","name","data","map","markers","selectedStation","showDeleteModal","stationToDelete","mapFilters","status","connectorType","computed","filteredMapStations","filtered","allStations","filter","station","mapboxToken","methods","initializeMap","accessToken","Map","container","$refs","mapContainer","style","center","zoom","addControl","NavigationControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","on","addMarkersToMap","id","lat","lng","$route","query","find","s","_id","selectStation","flyTo","parseFloat","forEach","marker","remove","el","document","createElement","className","backgroundColor","getMarkerColor","width","height","borderRadius","border","boxShadow","popup","Popup","offset","setHTML","powerOutput","Marker","setLngLat","location","longitude","latitude","setPopup","addTo","getElement","addEventListener","push","length","fitMapToMarkers","bounds","LngLatBounds","extend","fitBounds","padding","maxZoom","colors","getStatusBadgeClass","classes","canManageStation","isLoggedIn","user","owner","role","confirmDelete","deleteSelectedStation","deleteStation","error","console","applyMapFilters","resetMapFilters","mounted","fetchStations","beforeUnmount"],"sources":["C:\\Users\\admin\\OneDrive\\Desktop\\3june\\frontend\\src\\views\\MapView.vue"],"sourcesContent":["<template>\n  <div class=\"map-view\">\n    <h2 class=\"mb-3\">Charging Stations Map</h2>\n    \n    <div class=\"row\">\n      <div class=\"col-md-8\">\n        <!-- Map Container -->\n        <div class=\"card mb-4\">\n          <div class=\"card-body p-0\">\n            <div id=\"map\" ref=\"mapContainer\" class=\"map-container\"></div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"col-md-4\">\n        <!-- Station Details Panel -->\n        <div class=\"card mb-4\">\n          <div class=\"card-header bg-primary text-white\">\n            <h5 class=\"mb-0\">Station Details</h5>\n          </div>\n          <div class=\"card-body\">\n            <div v-if=\"selectedStation\">\n              <h4>{{ selectedStation.name }}</h4>\n              <div class=\"mb-2\">\n                <span :class=\"getStatusBadgeClass(selectedStation.status)\">\n                  {{ selectedStation.status }}\n                </span>\n              </div>\n              \n              <div class=\"station-details\">\n                <p v-if=\"selectedStation.address\" class=\"mb-2\">\n                  <i class=\"bi bi-geo-alt\"></i> <strong>Address:</strong> {{ selectedStation.address }}\n                </p>\n                <p class=\"mb-2\">\n                  <i class=\"bi bi-lightning-charge\"></i> <strong>Power Output:</strong> {{ selectedStation.powerOutput }} kW\n                </p>\n                <p class=\"mb-2\">\n                  <i class=\"bi bi-plug\"></i> <strong>Connector Type:</strong> {{ selectedStation.connectorType }}\n                </p>\n                <p v-if=\"selectedStation.pricePerKwh\" class=\"mb-2\">\n                  <i class=\"bi bi-currency-dollar\"></i> <strong>Price:</strong> ${{ selectedStation.pricePerKwh }} per kWh\n                </p>\n                <p v-if=\"selectedStation.availableHours\" class=\"mb-2\">\n                  <i class=\"bi bi-clock\"></i> <strong>Hours:</strong> \n                  {{ selectedStation.availableHours.open }} - {{ selectedStation.availableHours.close }}\n                </p>\n                <p class=\"mb-2 text-muted\">\n                  <small>Added by: {{ selectedStation.owner?.username || 'Unknown' }}</small>\n                </p>\n              </div>\n              \n              <div class=\"mt-3\" v-if=\"canManageStation(selectedStation)\">\n                <router-link \n                  :to=\"`/stations/${selectedStation._id}/edit`\" \n                  class=\"btn btn-sm btn-outline-secondary me-1\"\n                >\n                  <i class=\"bi bi-pencil\"></i> Edit\n                </router-link>\n                <button \n                  class=\"btn btn-sm btn-outline-danger\"\n                  @click=\"confirmDelete(selectedStation)\"\n                >\n                  <i class=\"bi bi-trash\"></i> Delete\n                </button>\n              </div>\n            </div>\n            <div v-else class=\"text-center py-4\">\n              <i class=\"bi bi-map display-4 text-muted\"></i>\n              <p class=\"mt-3\">Select a station on the map to view details</p>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Filters Panel -->\n        <div class=\"card\">\n          <div class=\"card-header bg-light\">\n            <h5 class=\"mb-0\">Map Filters</h5>\n          </div>\n          <div class=\"card-body\">\n            <div class=\"mb-3\">\n              <label for=\"mapStatusFilter\" class=\"form-label\">Status</label>\n              <select \n                id=\"mapStatusFilter\" \n                class=\"form-select\" \n                v-model=\"mapFilters.status\"\n                @change=\"applyMapFilters\"\n              >\n                <option value=\"\">All Statuses</option>\n                <option value=\"Active\">Active</option>\n                <option value=\"Inactive\">Inactive</option>\n                <option value=\"Maintenance\">Maintenance</option>\n              </select>\n            </div>\n            \n            <div class=\"mb-3\">\n              <label for=\"mapConnectorFilter\" class=\"form-label\">Connector Type</label>\n              <select \n                id=\"mapConnectorFilter\" \n                class=\"form-select\" \n                v-model=\"mapFilters.connectorType\"\n                @change=\"applyMapFilters\"\n              >\n                <option value=\"\">All Connectors</option>\n                <option value=\"Type 1\">Type 1</option>\n                <option value=\"Type 2\">Type 2</option>\n                <option value=\"CCS\">CCS</option>\n                <option value=\"CHAdeMO\">CHAdeMO</option>\n                <option value=\"Tesla\">Tesla</option>\n              </select>\n            </div>\n            \n            <button class=\"btn btn-secondary w-100\" @click=\"resetMapFilters\">\n              Reset Filters\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Delete Confirmation Modal -->\n    <div v-if=\"showDeleteModal\" class=\"modal fade show\" style=\"display: block; background-color: rgba(0,0,0,0.5)\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Confirm Delete</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"showDeleteModal = false\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <p>Are you sure you want to delete the charging station \"{{ stationToDelete?.name }}\"?</p>\n            <p class=\"text-danger\">This action cannot be undone.</p>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"showDeleteModal = false\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-danger\" @click=\"deleteSelectedStation\">Delete</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\nimport mapboxgl from 'mapbox-gl';\n\nexport default {\n  name: 'MapView',\n  data() {\n    return {\n      map: null,\n      markers: [],\n      selectedStation: null,\n      showDeleteModal: false,\n      stationToDelete: null,\n      mapFilters: {\n        status: '',\n        connectorType: ''\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['allStations', 'loading', 'isLoggedIn', 'user']),\n    filteredMapStations() {\n      let filtered = [...this.allStations];\n      \n      if (this.mapFilters.status) {\n        filtered = filtered.filter(station => station.status === this.mapFilters.status);\n      }\n      \n      if (this.mapFilters.connectorType) {\n        filtered = filtered.filter(station => station.connectorType === this.mapFilters.connectorType);\n      }\n      \n      return filtered;\n    },\n    mapboxToken() {\n      // Using a valid public token for demo purposes\n      return 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';\n    }\n  },\n  methods: {\n    ...mapActions(['fetchStations', 'deleteStation']),\n    \n    initializeMap() {\n      mapboxgl.accessToken = this.mapboxToken;\n      \n      this.map = new mapboxgl.Map({\n        container: this.$refs.mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [-98.5795, 39.8283], // Center of USA\n        zoom: 3\n      });\n      \n      // Add navigation controls\n      this.map.addControl(new mapboxgl.NavigationControl());\n      \n      // Add geolocate control\n      this.map.addControl(\n        new mapboxgl.GeolocateControl({\n          positionOptions: {\n            enableHighAccuracy: true\n          },\n          trackUserLocation: true\n        })\n      );\n      \n      // Wait for map to load before adding markers\n      this.map.on('load', () => {\n        this.addMarkersToMap();\n        \n        // Check if there's a station ID in the query params\n        const { id, lat, lng } = this.$route.query;\n        if (id) {\n          const station = this.allStations.find(s => s._id === id);\n          if (station) {\n            this.selectStation(station);\n          }\n        } else if (lat && lng) {\n          // Center map on coordinates\n          this.map.flyTo({\n            center: [parseFloat(lng), parseFloat(lat)],\n            zoom: 15\n          });\n        }\n      });\n    },\n    \n    addMarkersToMap() {\n      // Clear existing markers\n      this.markers.forEach(marker => marker.remove());\n      this.markers = [];\n      \n      // Add markers for filtered stations\n      this.filteredMapStations.forEach(station => {\n        // Create marker element\n        const el = document.createElement('div');\n        el.className = 'marker';\n        el.style.backgroundColor = this.getMarkerColor(station.status);\n        el.style.width = '20px';\n        el.style.height = '20px';\n        el.style.borderRadius = '50%';\n        el.style.border = '2px solid white';\n        el.style.boxShadow = '0 0 5px rgba(0,0,0,0.3)';\n        \n        // Create popup\n        const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(\n          `<strong>${station.name}</strong><br>\n          ${station.connectorType} - ${station.powerOutput} kW`\n        );\n        \n        // Create marker\n        const marker = new mapboxgl.Marker(el)\n          .setLngLat([station.location.longitude, station.location.latitude])\n          .setPopup(popup)\n          .addTo(this.map);\n        \n        // Add click event\n        marker.getElement().addEventListener('click', () => {\n          this.selectStation(station);\n        });\n        \n        this.markers.push(marker);\n      });\n      \n      // Fit map to markers if there are any\n      if (this.markers.length > 0) {\n        this.fitMapToMarkers();\n      }\n    },\n    \n    fitMapToMarkers() {\n      if (!this.map || this.markers.length === 0) return;\n      \n      const bounds = new mapboxgl.LngLatBounds();\n      \n      this.filteredMapStations.forEach(station => {\n        bounds.extend([station.location.longitude, station.location.latitude]);\n      });\n      \n      this.map.fitBounds(bounds, {\n        padding: 50,\n        maxZoom: 15\n      });\n    },\n    \n    selectStation(station) {\n      this.selectedStation = station;\n      \n      // Center map on selected station\n      this.map.flyTo({\n        center: [station.location.longitude, station.location.latitude],\n        zoom: 15\n      });\n    },\n    \n    getMarkerColor(status) {\n      const colors = {\n        'Active': '#28a745',\n        'Inactive': '#6c757d',\n        'Maintenance': '#ffc107'\n      };\n      return colors[status] || '#6c757d';\n    },\n    \n    getStatusBadgeClass(status) {\n      const classes = {\n        'Active': 'badge bg-success',\n        'Inactive': 'badge bg-secondary',\n        'Maintenance': 'badge bg-warning text-dark'\n      };\n      return classes[status] || 'badge bg-secondary';\n    },\n    \n    canManageStation(station) {\n      if (!this.isLoggedIn || !this.user) return false;\n      \n      // User can manage if they are the owner or an admin\n      return (station.owner?._id === this.user._id) || (this.user.role === 'admin');\n    },\n    \n    confirmDelete(station) {\n      this.stationToDelete = station;\n      this.showDeleteModal = true;\n    },\n    \n    async deleteSelectedStation() {\n      if (!this.stationToDelete) return;\n      \n      try {\n        await this.deleteStation(this.stationToDelete._id);\n        this.showDeleteModal = false;\n        this.stationToDelete = null;\n        this.selectedStation = null;\n      } catch (error) {\n        console.error('Error deleting station:', error);\n      }\n    },\n    \n    applyMapFilters() {\n      this.addMarkersToMap();\n    },\n    \n    resetMapFilters() {\n      this.mapFilters = {\n        status: '',\n        connectorType: ''\n      };\n      this.addMarkersToMap();\n    }\n  },\n  async mounted() {\n    await this.fetchStations();\n    this.initializeMap();\n  },\n  beforeUnmount() {\n    if (this.map) {\n      this.map.remove();\n    }\n  }\n}\n</script>\n\n<style scoped>\n@import url(\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css\");\n@import 'mapbox-gl/dist/mapbox-gl.css';\n\n.map-view {\n  padding-bottom: 2rem;\n}\n\n.map-container {\n  width: 100%;\n  height: 600px;\n  border-radius: 0.25rem;\n}\n\n.station-details i {\n  width: 20px;\n  text-align: center;\n  margin-right: 5px;\n}\n\n/* Modal backdrop */\n.modal {\n  backdrop-filter: blur(5px);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}