{"ast":null,"code":"import { mapActions, mapGetters } from 'vuex';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\n// Fix Leaflet icon issue\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nexport default {\n  name: 'MapView',\n  data() {\n    return {\n      map: null,\n      markerLayer: null,\n      markers: {},\n      selectedStation: null,\n      showDeleteModal: false,\n      stationToDelete: null,\n      mapFilters: {\n        status: '',\n        connectorType: ''\n      },\n      isUnmounting: false,\n      mapEventListeners: []\n    };\n  },\n  computed: {\n    ...mapGetters(['allStations', 'loading', 'isLoggedIn', 'user']),\n    filteredMapStations() {\n      let filtered = [...this.allStations];\n      if (this.mapFilters.status) {\n        filtered = filtered.filter(station => station.status === this.mapFilters.status);\n      }\n      if (this.mapFilters.connectorType) {\n        filtered = filtered.filter(station => station.connectorType === this.mapFilters.connectorType);\n      }\n      return filtered;\n    }\n  },\n  methods: {\n    ...mapActions(['fetchStations', 'deleteStation']),\n    // Helper method to validate coordinates\n    isValidCoordinate(location) {\n      if (!location || location.latitude === undefined || location.longitude === undefined) return false;\n      const lat = parseFloat(location.latitude);\n      const lng = parseFloat(location.longitude);\n      return !isNaN(lat) && !isNaN(lng) && lat >= -90 && lat <= 90 && lng >= -180 && lng <= 180;\n    },\n    initializeMap() {\n      try {\n        // Check if map container exists\n        if (!this.$refs.mapContainer) {\n          console.error('Map container not found');\n          return;\n        }\n\n        // Prevent re-initialization if map already exists\n        if (this.map) {\n          console.warn('Map already initialized');\n          return;\n        }\n\n        // Add a flag to track unmounting state\n        this.isUnmounting = false;\n\n        // Initialize the map with Leaflet with zoomAnimation disabled\n        this.map = L.map(this.$refs.mapContainer, {\n          zoomAnimation: false,\n          // Disable zoom animation to prevent the _latLngToNewLayerPoint error\n          fadeAnimation: false // Disable fade animation for better stability\n        }).setView([39.8283, -98.5795], 4); // Center of USA\n\n        // Add OpenStreetMap tile layer (free)\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 19\n        }).addTo(this.map);\n\n        // Create a layer group for markers\n        this.markerLayer = L.layerGroup().addTo(this.map);\n\n        // Add scale control\n        L.control.scale().addTo(this.map);\n\n        // Update markers when map is ready\n        this.updateMapMarkers();\n\n        // Check for station ID in query params\n        const stationId = this.$route.query.id;\n        if (stationId) {\n          // Find the station in the current list\n          const station = this.allStations.find(s => s._id === stationId);\n          if (station) {\n            this.selectedStation = station;\n\n            // Center map on the station\n            if (station.location && this.isValidCoordinate(station.location)) {\n              const lat = parseFloat(station.location.latitude);\n              const lng = parseFloat(station.location.longitude);\n              this.map.setView([lat, lng], 15);\n            }\n          }\n        }\n\n        // Handle map click to deselect station - store reference to remove later\n        const mapClickHandler = () => {\n          // Skip if component is unmounting\n          if (this.isUnmounting) return;\n\n          // Check if any popups are open by looking at the map container\n          if (this.$refs.mapContainer) {\n            const popupElements = this.$refs.mapContainer.querySelectorAll('.leaflet-popup');\n            if (popupElements.length === 0) {\n              // No popups are open, so deselect the station\n              this.selectedStation = null;\n            }\n          }\n        };\n        this.map.on('click', mapClickHandler);\n\n        // Store event listeners for later cleanup\n        this.mapEventListeners.push({\n          event: 'click',\n          handler: mapClickHandler\n        });\n\n        // Add error handling for map events\n        this.map.on('error', e => {\n          console.error('Leaflet map error:', e);\n        });\n      } catch (error) {\n        console.error('Error initializing map:', error);\n      }\n    },\n    // Create a custom icon for markers\n    createMarkerIcon(color = '#3388ff') {\n      return L.divIcon({\n        className: 'custom-map-marker',\n        html: `<div style=\"background-color: ${color}; width: 24px; height: 24px; border-radius: 50%; border: 2px solid white; box-shadow: 0 0 4px rgba(0,0,0,0.4);\"></div>`,\n        iconSize: [24, 24],\n        iconAnchor: [12, 12],\n        popupAnchor: [0, -12]\n      });\n    },\n    updateMapMarkers() {\n      // Skip if map is not initialized or component is unmounting\n      if (!this.map || !this.markerLayer || this.isUnmounting) return;\n      try {\n        // Clear existing markers\n        this.markerLayer.clearLayers();\n\n        // Clean up marker references\n        Object.keys(this.markers).forEach(key => {\n          if (this.markers[key]) {\n            this.markers[key].off();\n          }\n        });\n        this.markers = {};\n\n        // Add markers for filtered stations\n        this.filteredMapStations.forEach(station => {\n          if (!station.location || !this.isValidCoordinate(station.location)) return;\n\n          // Parse coordinates to ensure they're valid numbers\n          const lat = parseFloat(station.location.latitude);\n          const lng = parseFloat(station.location.longitude);\n\n          // Skip invalid coordinates\n          if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {\n            console.warn(`Invalid coordinates for station ${station.name}: ${lat}, ${lng}`);\n            return;\n          }\n\n          // Create marker with appropriate icon based on status\n          const color = this.getStatusColor(station.status);\n          const marker = L.marker([lat, lng], {\n            icon: this.createMarkerIcon(color)\n          });\n\n          // Create popup content\n          const popupContent = `\n            <strong>${station.name}</strong><br>\n            <span class=\"badge ${this.getStatusBadgeClass(station.status)}\">${station.status}</span><br>\n            ${station.connectorType} - ${station.powerOutput} kW\n          `;\n\n          // Bind popup to marker\n          marker.bindPopup(popupContent);\n\n          // Add click handler\n          const markerClickHandler = () => {\n            if (!this.isUnmounting) {\n              this.selectedStation = station;\n            }\n          };\n          marker.on('click', markerClickHandler);\n\n          // Add marker to layer and store reference\n          marker.addTo(this.markerLayer);\n          this.markers[station._id] = marker;\n        });\n      } catch (error) {\n        console.error('Error updating map markers:', error);\n      }\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        'Active': 'badge bg-success',\n        'Inactive': 'badge bg-secondary',\n        'Maintenance': 'badge bg-warning text-dark'\n      };\n      return classes[status] || 'badge bg-secondary';\n    },\n    getStatusColor(status) {\n      const colors = {\n        'Active': '#28a745',\n        // Green\n        'Inactive': '#6c757d',\n        // Gray\n        'Maintenance': '#ffc107' // Yellow\n      };\n      return colors[status] || '#6c757d';\n    },\n    applyMapFilters() {\n      this.updateMapMarkers();\n    },\n    resetMapFilters() {\n      this.mapFilters = {\n        status: '',\n        connectorType: ''\n      };\n      this.updateMapMarkers();\n    },\n    canManageStation(station) {\n      if (!this.isLoggedIn || !this.user) return false;\n\n      // User can manage if they are the owner or an admin\n      return station.owner?._id === this.user._id || this.user.role === 'admin';\n    },\n    confirmDelete(station) {\n      this.stationToDelete = station;\n      this.showDeleteModal = true;\n    },\n    async deleteSelectedStation() {\n      if (!this.stationToDelete) return;\n      try {\n        await this.deleteStation(this.stationToDelete._id);\n        this.showDeleteModal = false;\n        this.stationToDelete = null;\n        this.selectedStation = null;\n\n        // Update markers after deletion\n        this.updateMapMarkers();\n      } catch (error) {\n        console.error('Error deleting station:', error);\n      }\n    }\n  },\n  mounted() {\n    // Ensure the map container is properly rendered before initializing the map\n    this.$nextTick(() => {\n      this.fetchStations().then(() => {\n        // Small delay to ensure DOM is fully rendered\n        setTimeout(() => {\n          if (!this.isUnmounting) {\n            this.initializeMap();\n          }\n        }, 100);\n      });\n    });\n  },\n  beforeUnmount() {\n    // Set unmounting flag to prevent further interactions\n    this.isUnmounting = true;\n\n    // Clean up map instance and all event listeners\n    if (this.map) {\n      try {\n        // Remove specific event listeners first\n        this.mapEventListeners.forEach(listener => {\n          this.map.off(listener.event, listener.handler);\n        });\n\n        // Then remove all other event listeners\n        this.map.off();\n\n        // Clear all markers and layers\n        if (this.markerLayer) {\n          this.markerLayer.clearLayers();\n          this.markerLayer.remove();\n          this.markerLayer = null;\n        }\n\n        // Clear all markers references\n        Object.keys(this.markers).forEach(key => {\n          if (this.markers[key]) {\n            this.markers[key].off();\n            if (this.map) this.markers[key].remove();\n          }\n        });\n        this.markers = {};\n\n        // Remove the map instance with a small delay to ensure all animations are complete\n        setTimeout(() => {\n          if (this.map) {\n            this.map.remove();\n            this.map = null;\n          }\n        }, 100);\n      } catch (error) {\n        console.error('Error cleaning up map:', error);\n        // Ensure map is set to null even if there's an error\n        this.map = null;\n      }\n    }\n  },\n  watch: {\n    allStations() {\n      if (this.map) {\n        this.updateMapMarkers();\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","name","data","map","markerLayer","markers","selectedStation","showDeleteModal","stationToDelete","mapFilters","status","connectorType","isUnmounting","mapEventListeners","computed","filteredMapStations","filtered","allStations","filter","station","methods","isValidCoordinate","location","latitude","undefined","longitude","lat","parseFloat","lng","isNaN","initializeMap","$refs","mapContainer","console","error","warn","zoomAnimation","fadeAnimation","setView","tileLayer","attribution","maxZoom","addTo","layerGroup","control","scale","updateMapMarkers","stationId","$route","query","id","find","s","_id","mapClickHandler","popupElements","querySelectorAll","length","on","push","event","handler","e","createMarkerIcon","color","divIcon","className","html","iconSize","iconAnchor","popupAnchor","clearLayers","Object","keys","forEach","key","off","getStatusColor","marker","icon","popupContent","getStatusBadgeClass","powerOutput","bindPopup","markerClickHandler","classes","colors","applyMapFilters","resetMapFilters","canManageStation","isLoggedIn","user","owner","role","confirmDelete","deleteSelectedStation","deleteStation","mounted","$nextTick","fetchStations","then","setTimeout","beforeUnmount","listener","remove","watch"],"sources":["C:\\Users\\admin\\OneDrive\\Desktop\\3june\\frontend\\src\\views\\MapView.vue"],"sourcesContent":["<template>\n  <div class=\"map-view\">\n    <h2 class=\"mb-3\">Charging Stations Map</h2>\n    \n    <div class=\"row\">\n      <div class=\"col-md-8\">\n        <!-- Map Container -->\n        <div class=\"card mb-4\">\n          <div class=\"card-body p-0\">\n            <div id=\"map\" ref=\"mapContainer\" class=\"map-container\"></div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"col-md-4\">\n        <!-- Station Details Panel -->\n        <div class=\"card mb-4\">\n          <div class=\"card-header bg-primary text-white\">\n            <h5 class=\"mb-0\">Station Details</h5>\n          </div>\n          <div class=\"card-body\">\n            <div v-if=\"selectedStation\">\n              <h4>{{ selectedStation.name }}</h4>\n              <div class=\"mb-2\">\n                <span :class=\"getStatusBadgeClass(selectedStation.status)\">\n                  {{ selectedStation.status }}\n                </span>\n              </div>\n              \n              <div class=\"station-details\">\n                <p v-if=\"selectedStation.address\" class=\"mb-2\">\n                  <i class=\"bi bi-geo-alt\"></i> <strong>Address:</strong> {{ selectedStation.address }}\n                </p>\n                <p class=\"mb-2\">\n                  <i class=\"bi bi-lightning-charge\"></i> <strong>Power Output:</strong> {{ selectedStation.powerOutput }} kW\n                </p>\n                <p class=\"mb-2\">\n                  <i class=\"bi bi-plug\"></i> <strong>Connector Type:</strong> {{ selectedStation.connectorType }}\n                </p>\n                <p v-if=\"selectedStation.pricePerKwh\" class=\"mb-2\">\n                  <i class=\"bi bi-currency-dollar\"></i> <strong>Price:</strong> ${{ selectedStation.pricePerKwh }} per kWh\n                </p>\n                <p v-if=\"selectedStation.availableHours\" class=\"mb-2\">\n                  <i class=\"bi bi-clock\"></i> <strong>Hours:</strong> \n                  {{ selectedStation.availableHours.open }} - {{ selectedStation.availableHours.close }}\n                </p>\n                <p class=\"mb-2 text-muted\">\n                  <small>Added by: {{ selectedStation.owner?.username || 'Unknown' }}</small>\n                </p>\n              </div>\n              \n              <div class=\"mt-3\" v-if=\"canManageStation(selectedStation)\">\n                <router-link \n                  :to=\"`/stations/${selectedStation._id}/edit`\" \n                  class=\"btn btn-sm btn-outline-secondary me-2\"\n                >\n                  <i class=\"bi bi-pencil\"></i> Edit\n                </router-link>\n                <button \n                  class=\"btn btn-sm btn-outline-danger\"\n                  @click=\"confirmDelete(selectedStation)\"\n                >\n                  <i class=\"bi bi-trash\"></i> Delete\n                </button>\n              </div>\n            </div>\n            <div v-else class=\"text-center py-4\">\n              <i class=\"bi bi-map-fill text-muted\" style=\"font-size: 3rem;\"></i>\n              <p class=\"mt-3 text-muted\">Select a station on the map to view details</p>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Filter Panel -->\n        <div class=\"card\">\n          <div class=\"card-header bg-light\">\n            <h5 class=\"mb-0\">Filters</h5>\n          </div>\n          <div class=\"card-body\">\n            <div class=\"mb-3\">\n              <label for=\"statusMapFilter\" class=\"form-label\">Status</label>\n              <select\n                id=\"statusMapFilter\"\n                class=\"form-select\"\n                v-model=\"mapFilters.status\"\n                @change=\"applyMapFilters\"\n              >\n                <option value=\"\">All Statuses</option>\n                <option value=\"Active\">Active</option>\n                <option value=\"Inactive\">Inactive</option>\n                <option value=\"Maintenance\">Maintenance</option>\n              </select>\n            </div>\n            \n            <div class=\"mb-3\">\n              <label for=\"connectorMapFilter\" class=\"form-label\">Connector Type</label>\n              <select\n                id=\"connectorMapFilter\"\n                class=\"form-select\"\n                v-model=\"mapFilters.connectorType\"\n                @change=\"applyMapFilters\"\n              >\n                <option value=\"\">All Connectors</option>\n                <option value=\"Type 1\">Type 1</option>\n                <option value=\"Type 2\">Type 2</option>\n                <option value=\"CCS\">CCS</option>\n                <option value=\"CHAdeMO\">CHAdeMO</option>\n                <option value=\"Tesla\">Tesla</option>\n              </select>\n            </div>\n            \n            <button class=\"btn btn-secondary w-100\" @click=\"resetMapFilters\">\n              Reset Filters\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Delete Confirmation Modal -->\n    <div v-if=\"showDeleteModal\" class=\"modal fade show\" style=\"display: block; background-color: rgba(0,0,0,0.5)\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Confirm Delete</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"showDeleteModal = false\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <p>Are you sure you want to delete the charging station \"{{ stationToDelete?.name }}\"?</p>\n            <p class=\"text-danger\">This action cannot be undone.</p>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"showDeleteModal = false\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-danger\" @click=\"deleteSelectedStation\">Delete</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\n// Fix Leaflet icon issue\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nexport default {\n  name: 'MapView',\n  data() {\n    return {\n      map: null,\n      markerLayer: null,\n      markers: {},\n      selectedStation: null,\n      showDeleteModal: false,\n      stationToDelete: null,\n      mapFilters: {\n        status: '',\n        connectorType: ''\n      },\n      isUnmounting: false,\n      mapEventListeners: []\n    }\n  },\n  computed: {\n    ...mapGetters(['allStations', 'loading', 'isLoggedIn', 'user']),\n    filteredMapStations() {\n      let filtered = [...this.allStations];\n      \n      if (this.mapFilters.status) {\n        filtered = filtered.filter(station => station.status === this.mapFilters.status);\n      }\n      \n      if (this.mapFilters.connectorType) {\n        filtered = filtered.filter(station => station.connectorType === this.mapFilters.connectorType);\n      }\n      \n      return filtered;\n    }\n  },\n  methods: {\n    ...mapActions(['fetchStations', 'deleteStation']),\n    \n    // Helper method to validate coordinates\n    isValidCoordinate(location) {\n      if (!location || location.latitude === undefined || location.longitude === undefined) return false;\n      \n      const lat = parseFloat(location.latitude);\n      const lng = parseFloat(location.longitude);\n      \n      return !isNaN(lat) && !isNaN(lng) && \n             lat >= -90 && lat <= 90 && \n             lng >= -180 && lng <= 180;\n    },\n    \n    initializeMap() {\n      try {\n        // Check if map container exists\n        if (!this.$refs.mapContainer) {\n          console.error('Map container not found');\n          return;\n        }\n\n        // Prevent re-initialization if map already exists\n        if (this.map) {\n          console.warn('Map already initialized');\n          return;\n        }\n\n        // Add a flag to track unmounting state\n        this.isUnmounting = false;\n\n        // Initialize the map with Leaflet with zoomAnimation disabled\n        this.map = L.map(this.$refs.mapContainer, {\n          zoomAnimation: false, // Disable zoom animation to prevent the _latLngToNewLayerPoint error\n          fadeAnimation: false  // Disable fade animation for better stability\n        }).setView([39.8283, -98.5795], 4); // Center of USA\n        \n        // Add OpenStreetMap tile layer (free)\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 19\n        }).addTo(this.map);\n        \n        // Create a layer group for markers\n        this.markerLayer = L.layerGroup().addTo(this.map);\n        \n        // Add scale control\n        L.control.scale().addTo(this.map);\n        \n        // Update markers when map is ready\n        this.updateMapMarkers();\n        \n        // Check for station ID in query params\n        const stationId = this.$route.query.id;\n        if (stationId) {\n          // Find the station in the current list\n          const station = this.allStations.find(s => s._id === stationId);\n          if (station) {\n            this.selectedStation = station;\n            \n            // Center map on the station\n            if (station.location && this.isValidCoordinate(station.location)) {\n              const lat = parseFloat(station.location.latitude);\n              const lng = parseFloat(station.location.longitude);\n              this.map.setView([lat, lng], 15);\n            }\n          }\n        }\n        \n        // Handle map click to deselect station - store reference to remove later\n        const mapClickHandler = () => {\n          // Skip if component is unmounting\n          if (this.isUnmounting) return;\n          \n          // Check if any popups are open by looking at the map container\n          if (this.$refs.mapContainer) {\n            const popupElements = this.$refs.mapContainer.querySelectorAll('.leaflet-popup');\n            if (popupElements.length === 0) {\n              // No popups are open, so deselect the station\n              this.selectedStation = null;\n            }\n          }\n        };\n        \n        this.map.on('click', mapClickHandler);\n        \n        // Store event listeners for later cleanup\n        this.mapEventListeners.push({\n          event: 'click',\n          handler: mapClickHandler\n        });\n        \n        // Add error handling for map events\n        this.map.on('error', (e) => {\n          console.error('Leaflet map error:', e);\n        });\n      } catch (error) {\n        console.error('Error initializing map:', error);\n      }\n    },\n    \n    // Create a custom icon for markers\n    createMarkerIcon(color = '#3388ff') {\n      return L.divIcon({\n        className: 'custom-map-marker',\n        html: `<div style=\"background-color: ${color}; width: 24px; height: 24px; border-radius: 50%; border: 2px solid white; box-shadow: 0 0 4px rgba(0,0,0,0.4);\"></div>`,\n        iconSize: [24, 24],\n        iconAnchor: [12, 12],\n        popupAnchor: [0, -12]\n      });\n    },\n    \n    updateMapMarkers() {\n      // Skip if map is not initialized or component is unmounting\n      if (!this.map || !this.markerLayer || this.isUnmounting) return;\n      \n      try {\n        // Clear existing markers\n        this.markerLayer.clearLayers();\n        \n        // Clean up marker references\n        Object.keys(this.markers).forEach(key => {\n          if (this.markers[key]) {\n            this.markers[key].off();\n          }\n        });\n        this.markers = {};\n        \n        // Add markers for filtered stations\n        this.filteredMapStations.forEach(station => {\n          if (!station.location || !this.isValidCoordinate(station.location)) return;\n          \n          // Parse coordinates to ensure they're valid numbers\n          const lat = parseFloat(station.location.latitude);\n          const lng = parseFloat(station.location.longitude);\n          \n          // Skip invalid coordinates\n          if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {\n            console.warn(`Invalid coordinates for station ${station.name}: ${lat}, ${lng}`);\n            return;\n          }\n          \n          // Create marker with appropriate icon based on status\n          const color = this.getStatusColor(station.status);\n          const marker = L.marker([lat, lng], {\n            icon: this.createMarkerIcon(color)\n          });\n          \n          // Create popup content\n          const popupContent = `\n            <strong>${station.name}</strong><br>\n            <span class=\"badge ${this.getStatusBadgeClass(station.status)}\">${station.status}</span><br>\n            ${station.connectorType} - ${station.powerOutput} kW\n          `;\n          \n          // Bind popup to marker\n          marker.bindPopup(popupContent);\n          \n          // Add click handler\n          const markerClickHandler = () => {\n            if (!this.isUnmounting) {\n              this.selectedStation = station;\n            }\n          };\n          \n          marker.on('click', markerClickHandler);\n          \n          // Add marker to layer and store reference\n          marker.addTo(this.markerLayer);\n          this.markers[station._id] = marker;\n        });\n      } catch (error) {\n        console.error('Error updating map markers:', error);\n      }\n    },\n    \n    getStatusBadgeClass(status) {\n      const classes = {\n        'Active': 'badge bg-success',\n        'Inactive': 'badge bg-secondary',\n        'Maintenance': 'badge bg-warning text-dark'\n      };\n      return classes[status] || 'badge bg-secondary';\n    },\n    \n    getStatusColor(status) {\n      const colors = {\n        'Active': '#28a745',     // Green\n        'Inactive': '#6c757d',   // Gray\n        'Maintenance': '#ffc107' // Yellow\n      };\n      return colors[status] || '#6c757d';\n    },\n    \n    applyMapFilters() {\n      this.updateMapMarkers();\n    },\n    \n    resetMapFilters() {\n      this.mapFilters = {\n        status: '',\n        connectorType: ''\n      };\n      this.updateMapMarkers();\n    },\n    \n    canManageStation(station) {\n      if (!this.isLoggedIn || !this.user) return false;\n      \n      // User can manage if they are the owner or an admin\n      return (station.owner?._id === this.user._id) || (this.user.role === 'admin');\n    },\n    \n    confirmDelete(station) {\n      this.stationToDelete = station;\n      this.showDeleteModal = true;\n    },\n    \n    async deleteSelectedStation() {\n      if (!this.stationToDelete) return;\n      \n      try {\n        await this.deleteStation(this.stationToDelete._id);\n        this.showDeleteModal = false;\n        this.stationToDelete = null;\n        this.selectedStation = null;\n        \n        // Update markers after deletion\n        this.updateMapMarkers();\n      } catch (error) {\n        console.error('Error deleting station:', error);\n      }\n    }\n  },\n  mounted() {\n    // Ensure the map container is properly rendered before initializing the map\n    this.$nextTick(() => {\n      this.fetchStations().then(() => {\n        // Small delay to ensure DOM is fully rendered\n        setTimeout(() => {\n          if (!this.isUnmounting) {\n            this.initializeMap();\n          }\n        }, 100);\n      });\n    });\n  },\n  beforeUnmount() {\n    // Set unmounting flag to prevent further interactions\n    this.isUnmounting = true;\n    \n    // Clean up map instance and all event listeners\n    if (this.map) {\n      try {\n        // Remove specific event listeners first\n        this.mapEventListeners.forEach(listener => {\n          this.map.off(listener.event, listener.handler);\n        });\n        \n        // Then remove all other event listeners\n        this.map.off();\n        \n        // Clear all markers and layers\n        if (this.markerLayer) {\n          this.markerLayer.clearLayers();\n          this.markerLayer.remove();\n          this.markerLayer = null;\n        }\n        \n        // Clear all markers references\n        Object.keys(this.markers).forEach(key => {\n          if (this.markers[key]) {\n            this.markers[key].off();\n            if (this.map) this.markers[key].remove();\n          }\n        });\n        this.markers = {};\n        \n        // Remove the map instance with a small delay to ensure all animations are complete\n        setTimeout(() => {\n          if (this.map) {\n            this.map.remove();\n            this.map = null;\n          }\n        }, 100);\n      } catch (error) {\n        console.error('Error cleaning up map:', error);\n        // Ensure map is set to null even if there's an error\n        this.map = null;\n      }\n    }\n  },\n  watch: {\n    allStations() {\n      if (this.map) {\n        this.updateMapMarkers();\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.map-container {\n  height: 600px;\n  width: 100%;\n  border-radius: 0.25rem;\n}\n\n@media (max-width: 768px) {\n  .map-container {\n    height: 400px;\n  }\n}\n\n/* Override Leaflet styles */\n:deep(.leaflet-popup-content-wrapper) {\n  border-radius: 8px;\n}\n\n:deep(.leaflet-popup-content) {\n  margin: 12px 16px;\n  line-height: 1.5;\n}\n</style>\n"],"mappings":"AA8IA,SAASA,UAAU,EAAEC,UAAS,QAAS,MAAM;AAC7C,OAAO,0BAA0B;AACjC,OAAOC,CAAA,MAAO,SAAS;;AAEvB;AACA,OAAOA,CAAC,CAACC,IAAI,CAACC,OAAO,CAACC,SAAS,CAACC,WAAW;AAC3CJ,CAAC,CAACC,IAAI,CAACC,OAAO,CAACG,YAAY,CAAC;EAC1BC,aAAa,EAAEC,OAAO,CAAC,wCAAwC,CAAC;EAChEC,OAAO,EAAED,OAAO,CAAC,qCAAqC,CAAC;EACvDE,SAAS,EAAEF,OAAO,CAAC,uCAAuC;AAC5D,CAAC,CAAC;AAEF,eAAe;EACbG,IAAI,EAAE,SAAS;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,CAAC,CAAC;MACXC,eAAe,EAAE,IAAI;MACrBC,eAAe,EAAE,KAAK;MACtBC,eAAe,EAAE,IAAI;MACrBC,UAAU,EAAE;QACVC,MAAM,EAAE,EAAE;QACVC,aAAa,EAAE;MACjB,CAAC;MACDC,YAAY,EAAE,KAAK;MACnBC,iBAAiB,EAAE;IACrB;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGxB,UAAU,CAAC,CAAC,aAAa,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;IAC/DyB,mBAAmBA,CAAA,EAAG;MACpB,IAAIC,QAAO,GAAI,CAAC,GAAG,IAAI,CAACC,WAAW,CAAC;MAEpC,IAAI,IAAI,CAACR,UAAU,CAACC,MAAM,EAAE;QAC1BM,QAAO,GAAIA,QAAQ,CAACE,MAAM,CAACC,OAAM,IAAKA,OAAO,CAACT,MAAK,KAAM,IAAI,CAACD,UAAU,CAACC,MAAM,CAAC;MAClF;MAEA,IAAI,IAAI,CAACD,UAAU,CAACE,aAAa,EAAE;QACjCK,QAAO,GAAIA,QAAQ,CAACE,MAAM,CAACC,OAAM,IAAKA,OAAO,CAACR,aAAY,KAAM,IAAI,CAACF,UAAU,CAACE,aAAa,CAAC;MAChG;MAEA,OAAOK,QAAQ;IACjB;EACF,CAAC;EACDI,OAAO,EAAE;IACP,GAAG/B,UAAU,CAAC,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IAEjD;IACAgC,iBAAiBA,CAACC,QAAQ,EAAE;MAC1B,IAAI,CAACA,QAAO,IAAKA,QAAQ,CAACC,QAAO,KAAMC,SAAQ,IAAKF,QAAQ,CAACG,SAAQ,KAAMD,SAAS,EAAE,OAAO,KAAK;MAElG,MAAME,GAAE,GAAIC,UAAU,CAACL,QAAQ,CAACC,QAAQ,CAAC;MACzC,MAAMK,GAAE,GAAID,UAAU,CAACL,QAAQ,CAACG,SAAS,CAAC;MAE1C,OAAO,CAACI,KAAK,CAACH,GAAG,KAAK,CAACG,KAAK,CAACD,GAAG,KACzBF,GAAE,IAAK,CAAC,EAAC,IAAKA,GAAE,IAAK,EAAC,IACtBE,GAAE,IAAK,CAAC,GAAE,IAAKA,GAAE,IAAK,GAAG;IAClC,CAAC;IAEDE,aAAaA,CAAA,EAAG;MACd,IAAI;QACF;QACA,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,YAAY,EAAE;UAC5BC,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;UACxC;QACF;;QAEA;QACA,IAAI,IAAI,CAAC/B,GAAG,EAAE;UACZ8B,OAAO,CAACE,IAAI,CAAC,yBAAyB,CAAC;UACvC;QACF;;QAEA;QACA,IAAI,CAACvB,YAAW,GAAI,KAAK;;QAEzB;QACA,IAAI,CAACT,GAAE,GAAIZ,CAAC,CAACY,GAAG,CAAC,IAAI,CAAC4B,KAAK,CAACC,YAAY,EAAE;UACxCI,aAAa,EAAE,KAAK;UAAE;UACtBC,aAAa,EAAE,KAAI,CAAG;QACxB,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE;;QAEpC;QACA/C,CAAC,CAACgD,SAAS,CAAC,oDAAoD,EAAE;UAChEC,WAAW,EAAE,yFAAyF;UACtGC,OAAO,EAAE;QACX,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAACvC,GAAG,CAAC;;QAElB;QACA,IAAI,CAACC,WAAU,GAAIb,CAAC,CAACoD,UAAU,CAAC,CAAC,CAACD,KAAK,CAAC,IAAI,CAACvC,GAAG,CAAC;;QAEjD;QACAZ,CAAC,CAACqD,OAAO,CAACC,KAAK,CAAC,CAAC,CAACH,KAAK,CAAC,IAAI,CAACvC,GAAG,CAAC;;QAEjC;QACA,IAAI,CAAC2C,gBAAgB,CAAC,CAAC;;QAEvB;QACA,MAAMC,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,EAAE;QACtC,IAAIH,SAAS,EAAE;UACb;UACA,MAAM5B,OAAM,GAAI,IAAI,CAACF,WAAW,CAACkC,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,GAAE,KAAMN,SAAS,CAAC;UAC/D,IAAI5B,OAAO,EAAE;YACX,IAAI,CAACb,eAAc,GAAIa,OAAO;;YAE9B;YACA,IAAIA,OAAO,CAACG,QAAO,IAAK,IAAI,CAACD,iBAAiB,CAACF,OAAO,CAACG,QAAQ,CAAC,EAAE;cAChE,MAAMI,GAAE,GAAIC,UAAU,CAACR,OAAO,CAACG,QAAQ,CAACC,QAAQ,CAAC;cACjD,MAAMK,GAAE,GAAID,UAAU,CAACR,OAAO,CAACG,QAAQ,CAACG,SAAS,CAAC;cAClD,IAAI,CAACtB,GAAG,CAACmC,OAAO,CAAC,CAACZ,GAAG,EAAEE,GAAG,CAAC,EAAE,EAAE,CAAC;YAClC;UACF;QACF;;QAEA;QACA,MAAM0B,eAAc,GAAIA,CAAA,KAAM;UAC5B;UACA,IAAI,IAAI,CAAC1C,YAAY,EAAE;;UAEvB;UACA,IAAI,IAAI,CAACmB,KAAK,CAACC,YAAY,EAAE;YAC3B,MAAMuB,aAAY,GAAI,IAAI,CAACxB,KAAK,CAACC,YAAY,CAACwB,gBAAgB,CAAC,gBAAgB,CAAC;YAChF,IAAID,aAAa,CAACE,MAAK,KAAM,CAAC,EAAE;cAC9B;cACA,IAAI,CAACnD,eAAc,GAAI,IAAI;YAC7B;UACF;QACF,CAAC;QAED,IAAI,CAACH,GAAG,CAACuD,EAAE,CAAC,OAAO,EAAEJ,eAAe,CAAC;;QAErC;QACA,IAAI,CAACzC,iBAAiB,CAAC8C,IAAI,CAAC;UAC1BC,KAAK,EAAE,OAAO;UACdC,OAAO,EAAEP;QACX,CAAC,CAAC;;QAEF;QACA,IAAI,CAACnD,GAAG,CAACuD,EAAE,CAAC,OAAO,EAAGI,CAAC,IAAK;UAC1B7B,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAE4B,CAAC,CAAC;QACxC,CAAC,CAAC;MACJ,EAAE,OAAO5B,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAED;IACA6B,gBAAgBA,CAACC,KAAI,GAAI,SAAS,EAAE;MAClC,OAAOzE,CAAC,CAAC0E,OAAO,CAAC;QACfC,SAAS,EAAE,mBAAmB;QAC9BC,IAAI,EAAE,iCAAiCH,KAAK,wHAAwH;QACpKI,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QACpBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;MACtB,CAAC,CAAC;IACJ,CAAC;IAEDxB,gBAAgBA,CAAA,EAAG;MACjB;MACA,IAAI,CAAC,IAAI,CAAC3C,GAAE,IAAK,CAAC,IAAI,CAACC,WAAU,IAAK,IAAI,CAACQ,YAAY,EAAE;MAEzD,IAAI;QACF;QACA,IAAI,CAACR,WAAW,CAACmE,WAAW,CAAC,CAAC;;QAE9B;QACAC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACpE,OAAO,CAAC,CAACqE,OAAO,CAACC,GAAE,IAAK;UACvC,IAAI,IAAI,CAACtE,OAAO,CAACsE,GAAG,CAAC,EAAE;YACrB,IAAI,CAACtE,OAAO,CAACsE,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;UACzB;QACF,CAAC,CAAC;QACF,IAAI,CAACvE,OAAM,GAAI,CAAC,CAAC;;QAEjB;QACA,IAAI,CAACU,mBAAmB,CAAC2D,OAAO,CAACvD,OAAM,IAAK;UAC1C,IAAI,CAACA,OAAO,CAACG,QAAO,IAAK,CAAC,IAAI,CAACD,iBAAiB,CAACF,OAAO,CAACG,QAAQ,CAAC,EAAE;;UAEpE;UACA,MAAMI,GAAE,GAAIC,UAAU,CAACR,OAAO,CAACG,QAAQ,CAACC,QAAQ,CAAC;UACjD,MAAMK,GAAE,GAAID,UAAU,CAACR,OAAO,CAACG,QAAQ,CAACG,SAAS,CAAC;;UAElD;UACA,IAAII,KAAK,CAACH,GAAG,KAAKG,KAAK,CAACD,GAAG,KAAKF,GAAE,GAAI,CAAC,EAAC,IAAKA,GAAE,GAAI,EAAC,IAAKE,GAAE,GAAI,CAAC,GAAE,IAAKA,GAAE,GAAI,GAAG,EAAE;YAChFK,OAAO,CAACE,IAAI,CAAC,mCAAmChB,OAAO,CAAClB,IAAI,KAAKyB,GAAG,KAAKE,GAAG,EAAE,CAAC;YAC/E;UACF;;UAEA;UACA,MAAMoC,KAAI,GAAI,IAAI,CAACa,cAAc,CAAC1D,OAAO,CAACT,MAAM,CAAC;UACjD,MAAMoE,MAAK,GAAIvF,CAAC,CAACuF,MAAM,CAAC,CAACpD,GAAG,EAAEE,GAAG,CAAC,EAAE;YAClCmD,IAAI,EAAE,IAAI,CAAChB,gBAAgB,CAACC,KAAK;UACnC,CAAC,CAAC;;UAEF;UACA,MAAMgB,YAAW,GAAI;sBACT7D,OAAO,CAAClB,IAAI;iCACD,IAAI,CAACgF,mBAAmB,CAAC9D,OAAO,CAACT,MAAM,CAAC,KAAKS,OAAO,CAACT,MAAM;cAC9ES,OAAO,CAACR,aAAa,MAAMQ,OAAO,CAAC+D,WAAW;WACjD;;UAED;UACAJ,MAAM,CAACK,SAAS,CAACH,YAAY,CAAC;;UAE9B;UACA,MAAMI,kBAAiB,GAAIA,CAAA,KAAM;YAC/B,IAAI,CAAC,IAAI,CAACxE,YAAY,EAAE;cACtB,IAAI,CAACN,eAAc,GAAIa,OAAO;YAChC;UACF,CAAC;UAED2D,MAAM,CAACpB,EAAE,CAAC,OAAO,EAAE0B,kBAAkB,CAAC;;UAEtC;UACAN,MAAM,CAACpC,KAAK,CAAC,IAAI,CAACtC,WAAW,CAAC;UAC9B,IAAI,CAACC,OAAO,CAACc,OAAO,CAACkC,GAAG,IAAIyB,MAAM;QACpC,CAAC,CAAC;MACJ,EAAE,OAAO5C,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAED+C,mBAAmBA,CAACvE,MAAM,EAAE;MAC1B,MAAM2E,OAAM,GAAI;QACd,QAAQ,EAAE,kBAAkB;QAC5B,UAAU,EAAE,oBAAoB;QAChC,aAAa,EAAE;MACjB,CAAC;MACD,OAAOA,OAAO,CAAC3E,MAAM,KAAK,oBAAoB;IAChD,CAAC;IAEDmE,cAAcA,CAACnE,MAAM,EAAE;MACrB,MAAM4E,MAAK,GAAI;QACb,QAAQ,EAAE,SAAS;QAAM;QACzB,UAAU,EAAE,SAAS;QAAI;QACzB,aAAa,EAAE,SAAQ,CAAE;MAC3B,CAAC;MACD,OAAOA,MAAM,CAAC5E,MAAM,KAAK,SAAS;IACpC,CAAC;IAED6E,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACzC,gBAAgB,CAAC,CAAC;IACzB,CAAC;IAED0C,eAAeA,CAAA,EAAG;MAChB,IAAI,CAAC/E,UAAS,GAAI;QAChBC,MAAM,EAAE,EAAE;QACVC,aAAa,EAAE;MACjB,CAAC;MACD,IAAI,CAACmC,gBAAgB,CAAC,CAAC;IACzB,CAAC;IAED2C,gBAAgBA,CAACtE,OAAO,EAAE;MACxB,IAAI,CAAC,IAAI,CAACuE,UAAS,IAAK,CAAC,IAAI,CAACC,IAAI,EAAE,OAAO,KAAK;;MAEhD;MACA,OAAQxE,OAAO,CAACyE,KAAK,EAAEvC,GAAE,KAAM,IAAI,CAACsC,IAAI,CAACtC,GAAG,IAAM,IAAI,CAACsC,IAAI,CAACE,IAAG,KAAM,OAAQ;IAC/E,CAAC;IAEDC,aAAaA,CAAC3E,OAAO,EAAE;MACrB,IAAI,CAACX,eAAc,GAAIW,OAAO;MAC9B,IAAI,CAACZ,eAAc,GAAI,IAAI;IAC7B,CAAC;IAED,MAAMwF,qBAAqBA,CAAA,EAAG;MAC5B,IAAI,CAAC,IAAI,CAACvF,eAAe,EAAE;MAE3B,IAAI;QACF,MAAM,IAAI,CAACwF,aAAa,CAAC,IAAI,CAACxF,eAAe,CAAC6C,GAAG,CAAC;QAClD,IAAI,CAAC9C,eAAc,GAAI,KAAK;QAC5B,IAAI,CAACC,eAAc,GAAI,IAAI;QAC3B,IAAI,CAACF,eAAc,GAAI,IAAI;;QAE3B;QACA,IAAI,CAACwC,gBAAgB,CAAC,CAAC;MACzB,EAAE,OAAOZ,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF,CAAC;EACD+D,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,SAAS,CAAC,MAAM;MACnB,IAAI,CAACC,aAAa,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;QAC9B;QACAC,UAAU,CAAC,MAAM;UACf,IAAI,CAAC,IAAI,CAACzF,YAAY,EAAE;YACtB,IAAI,CAACkB,aAAa,CAAC,CAAC;UACtB;QACF,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EACDwE,aAAaA,CAAA,EAAG;IACd;IACA,IAAI,CAAC1F,YAAW,GAAI,IAAI;;IAExB;IACA,IAAI,IAAI,CAACT,GAAG,EAAE;MACZ,IAAI;QACF;QACA,IAAI,CAACU,iBAAiB,CAAC6D,OAAO,CAAC6B,QAAO,IAAK;UACzC,IAAI,CAACpG,GAAG,CAACyE,GAAG,CAAC2B,QAAQ,CAAC3C,KAAK,EAAE2C,QAAQ,CAAC1C,OAAO,CAAC;QAChD,CAAC,CAAC;;QAEF;QACA,IAAI,CAAC1D,GAAG,CAACyE,GAAG,CAAC,CAAC;;QAEd;QACA,IAAI,IAAI,CAACxE,WAAW,EAAE;UACpB,IAAI,CAACA,WAAW,CAACmE,WAAW,CAAC,CAAC;UAC9B,IAAI,CAACnE,WAAW,CAACoG,MAAM,CAAC,CAAC;UACzB,IAAI,CAACpG,WAAU,GAAI,IAAI;QACzB;;QAEA;QACAoE,MAAM,CAACC,IAAI,CAAC,IAAI,CAACpE,OAAO,CAAC,CAACqE,OAAO,CAACC,GAAE,IAAK;UACvC,IAAI,IAAI,CAACtE,OAAO,CAACsE,GAAG,CAAC,EAAE;YACrB,IAAI,CAACtE,OAAO,CAACsE,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;YACvB,IAAI,IAAI,CAACzE,GAAG,EAAE,IAAI,CAACE,OAAO,CAACsE,GAAG,CAAC,CAAC6B,MAAM,CAAC,CAAC;UAC1C;QACF,CAAC,CAAC;QACF,IAAI,CAACnG,OAAM,GAAI,CAAC,CAAC;;QAEjB;QACAgG,UAAU,CAAC,MAAM;UACf,IAAI,IAAI,CAAClG,GAAG,EAAE;YACZ,IAAI,CAACA,GAAG,CAACqG,MAAM,CAAC,CAAC;YACjB,IAAI,CAACrG,GAAE,GAAI,IAAI;UACjB;QACF,CAAC,EAAE,GAAG,CAAC;MACT,EAAE,OAAO+B,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C;QACA,IAAI,CAAC/B,GAAE,GAAI,IAAI;MACjB;IACF;EACF,CAAC;EACDsG,KAAK,EAAE;IACLxF,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACd,GAAG,EAAE;QACZ,IAAI,CAAC2C,gBAAgB,CAAC,CAAC;MACzB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}