{"ast":null,"code":"import { createStore } from 'vuex';\nimport VuexPersistence from 'vuex-persist';\nimport authModule from './modules/auth';\nimport stationModule from './modules/station';\n\n// Create a Vuex persistence instance to save state to localStorage\nconst vuexLocal = new VuexPersistence({\n  storage: window.localStorage,\n  key: 'ev-charging-app',\n  modules: ['auth'] // Only persist auth module\n});\n\n// Create the Vuex store\nexport default createStore({\n  state: {\n    loading: false,\n    error: null,\n    success: null\n  },\n  getters: {\n    loading: state => state.loading,\n    error: state => state.error,\n    success: state => state.success\n  },\n  mutations: {\n    SET_LOADING(state, status) {\n      state.loading = status;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    CLEAR_ERROR(state) {\n      state.error = null;\n    },\n    SET_SUCCESS(state, message) {\n      state.success = message;\n    },\n    CLEAR_SUCCESS(state) {\n      state.success = null;\n    }\n  },\n  actions: {\n    setLoading({\n      commit\n    }, status) {\n      commit('SET_LOADING', status);\n    },\n    setError({\n      commit\n    }, error) {\n      commit('SET_ERROR', error);\n      // Auto clear error after 5 seconds\n      setTimeout(() => {\n        commit('CLEAR_ERROR');\n      }, 5000);\n    },\n    clearError({\n      commit\n    }) {\n      commit('CLEAR_ERROR');\n    },\n    setSuccess({\n      commit\n    }, message) {\n      commit('SET_SUCCESS', message);\n      // Auto clear success message after 5 seconds\n      setTimeout(() => {\n        commit('CLEAR_SUCCESS');\n      }, 5000);\n    },\n    clearSuccess({\n      commit\n    }) {\n      commit('CLEAR_SUCCESS');\n    }\n  },\n  modules: {\n    auth: authModule,\n    station: stationModule\n  },\n  plugins: [vuexLocal.plugin]\n});","map":{"version":3,"names":["createStore","VuexPersistence","authModule","stationModule","vuexLocal","storage","window","localStorage","key","modules","state","loading","error","success","getters","mutations","SET_LOADING","status","SET_ERROR","CLEAR_ERROR","SET_SUCCESS","message","CLEAR_SUCCESS","actions","setLoading","commit","setError","setTimeout","clearError","setSuccess","clearSuccess","auth","station","plugins","plugin"],"sources":["C:/Users/admin/OneDrive/Desktop/3june/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport VuexPersistence from 'vuex-persist'\nimport authModule from './modules/auth'\nimport stationModule from './modules/station'\n\n// Create a Vuex persistence instance to save state to localStorage\nconst vuexLocal = new VuexPersistence({\n  storage: window.localStorage,\n  key: 'ev-charging-app',\n  modules: ['auth'] // Only persist auth module\n})\n\n// Create the Vuex store\nexport default createStore({\n  state: {\n    loading: false,\n    error: null,\n    success: null\n  },\n  getters: {\n    loading: state => state.loading,\n    error: state => state.error,\n    success: state => state.success\n  },\n  mutations: {\n    SET_LOADING(state, status) {\n      state.loading = status\n    },\n    SET_ERROR(state, error) {\n      state.error = error\n    },\n    CLEAR_ERROR(state) {\n      state.error = null\n    },\n    SET_SUCCESS(state, message) {\n      state.success = message\n    },\n    CLEAR_SUCCESS(state) {\n      state.success = null\n    }\n  },\n  actions: {\n    setLoading({ commit }, status) {\n      commit('SET_LOADING', status)\n    },\n    setError({ commit }, error) {\n      commit('SET_ERROR', error)\n      // Auto clear error after 5 seconds\n      setTimeout(() => {\n        commit('CLEAR_ERROR')\n      }, 5000)\n    },\n    clearError({ commit }) {\n      commit('CLEAR_ERROR')\n    },\n    setSuccess({ commit }, message) {\n      commit('SET_SUCCESS', message)\n      // Auto clear success message after 5 seconds\n      setTimeout(() => {\n        commit('CLEAR_SUCCESS')\n      }, 5000)\n    },\n    clearSuccess({ commit }) {\n      commit('CLEAR_SUCCESS')\n    }\n  },\n  modules: {\n    auth: authModule,\n    station: stationModule\n  },\n  plugins: [vuexLocal.plugin]\n})\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,eAAe,MAAM,cAAc;AAC1C,OAAOC,UAAU,MAAM,gBAAgB;AACvC,OAAOC,aAAa,MAAM,mBAAmB;;AAE7C;AACA,MAAMC,SAAS,GAAG,IAAIH,eAAe,CAAC;EACpCI,OAAO,EAAEC,MAAM,CAACC,YAAY;EAC5BC,GAAG,EAAE,iBAAiB;EACtBC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;AACpB,CAAC,CAAC;;AAEF;AACA,eAAeT,WAAW,CAAC;EACzBU,KAAK,EAAE;IACLC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,IAAI;IACXC,OAAO,EAAE;EACX,CAAC;EACDC,OAAO,EAAE;IACPH,OAAO,EAAED,KAAK,IAAIA,KAAK,CAACC,OAAO;IAC/BC,KAAK,EAAEF,KAAK,IAAIA,KAAK,CAACE,KAAK;IAC3BC,OAAO,EAAEH,KAAK,IAAIA,KAAK,CAACG;EAC1B,CAAC;EACDE,SAAS,EAAE;IACTC,WAAWA,CAACN,KAAK,EAAEO,MAAM,EAAE;MACzBP,KAAK,CAACC,OAAO,GAAGM,MAAM;IACxB,CAAC;IACDC,SAASA,CAACR,KAAK,EAAEE,KAAK,EAAE;MACtBF,KAAK,CAACE,KAAK,GAAGA,KAAK;IACrB,CAAC;IACDO,WAAWA,CAACT,KAAK,EAAE;MACjBA,KAAK,CAACE,KAAK,GAAG,IAAI;IACpB,CAAC;IACDQ,WAAWA,CAACV,KAAK,EAAEW,OAAO,EAAE;MAC1BX,KAAK,CAACG,OAAO,GAAGQ,OAAO;IACzB,CAAC;IACDC,aAAaA,CAACZ,KAAK,EAAE;MACnBA,KAAK,CAACG,OAAO,GAAG,IAAI;IACtB;EACF,CAAC;EACDU,OAAO,EAAE;IACPC,UAAUA,CAAC;MAAEC;IAAO,CAAC,EAAER,MAAM,EAAE;MAC7BQ,MAAM,CAAC,aAAa,EAAER,MAAM,CAAC;IAC/B,CAAC;IACDS,QAAQA,CAAC;MAAED;IAAO,CAAC,EAAEb,KAAK,EAAE;MAC1Ba,MAAM,CAAC,WAAW,EAAEb,KAAK,CAAC;MAC1B;MACAe,UAAU,CAAC,MAAM;QACfF,MAAM,CAAC,aAAa,CAAC;MACvB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IACDG,UAAUA,CAAC;MAAEH;IAAO,CAAC,EAAE;MACrBA,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IACDI,UAAUA,CAAC;MAAEJ;IAAO,CAAC,EAAEJ,OAAO,EAAE;MAC9BI,MAAM,CAAC,aAAa,EAAEJ,OAAO,CAAC;MAC9B;MACAM,UAAU,CAAC,MAAM;QACfF,MAAM,CAAC,eAAe,CAAC;MACzB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IACDK,YAAYA,CAAC;MAAEL;IAAO,CAAC,EAAE;MACvBA,MAAM,CAAC,eAAe,CAAC;IACzB;EACF,CAAC;EACDhB,OAAO,EAAE;IACPsB,IAAI,EAAE7B,UAAU;IAChB8B,OAAO,EAAE7B;EACX,CAAC;EACD8B,OAAO,EAAE,CAAC7B,SAAS,CAAC8B,MAAM;AAC5B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}